namespace Core.Physics.Parabola
{
    using Core.ConditionalHide;
    using System.Collections.Generic;
    using UnityEngine;

    public class ParabolaProjectile : MonoBehaviour
    {
        float radianAngle;
        float angle;

        int dynamicVerticesNumber;
        [SerializeField] List<Vector3> curvePoints = new List<Vector3>();
        List<Vector3> previousFrameCurvePoints = new List<Vector3>();

        [Header("Required data")]
        [SerializeField] Transform transformLookingAt;

        [Header("Dynamic data")]
        [SerializeField] float velocity;
        [SerializeField] bool useSpecificVerticesAmount;
        [SerializeField, ConditionalHide("useSpecificVerticesAmount", false, true)] int verticesDivider;
        [SerializeField, ConditionalHide("useSpecificVerticesAmount")] int vertices;
        [SerializeField] float gravity = 9.81f;

        public float Angle { get => angle; set => angle = value; }

        public int Vertices
        {
            get
            {
                if (useSpecificVerticesAmount) { return vertices; }
                return dynamicVerticesNumber;
            }
        }

        private void Update()
        {
            angle = transformLookingAt.localRotation.eulerAngles.z;
            RenderLineArc();
        }

        /// <summary>
        /// Populating the curve with the appropriates settings
        /// </summary>
        public void RenderLineArc()
        {

            curvePoints = CalculateLineRendererArcArray();
            dynamicVerticesNumber = SetDynamicNumberOfLineVertices();

        }

        /// <summary>
        /// Dynamic set of the vertices numbers depending on the size of parabola (between first and last point)
        /// </summary>
        /// <returns></returns>
        int SetDynamicNumberOfLineVertices()
        {
            previousFrameCurvePoints = curvePoints;
            if (previousFrameCurvePoints.Count > 1)
            {
                var distanceBetweenCurvePole = (int)Vector3.Distance(previousFrameCurvePoints[0], previousFrameCurvePoints[previousFrameCurvePoints.Count - 1]);
                if (verticesDivider != 0)
                {
                    distanceBetweenCurvePole = distanceBetweenCurvePole / verticesDivider;
                }
                if (distanceBetweenCurvePole <= 2) { return 3; } //3 is the default value to make it grow if dynamic vertices numbers isn't big enought
                return distanceBetweenCurvePole;
            }
            return 3;
        }

        /// <summary>
        /// Create a list of Vector3 positions for curve arc
        /// https://fr.wikipedia.org/wiki/Trajectoire_d%27un_projectile
        /// </summary>
        /// <returns></returns>
        List<Vector3> CalculateLineRendererArcArray()
        {
            var arcArray = new List<Vector3>();
            radianAngle = Mathf.Deg2Rad * angle;

            var maximumDistance = (velocity * velocity * Mathf.Sin(2 * radianAngle)) / gravity;

            curvePoints.Clear();

            for (int i = 0; i <= Vertices; i++)
            {
                var t = (float)i / (float)Vertices;
                arcArray.Add(CalculateArcPoint(t, maximumDistance));
            }

            return arcArray;
        }

        /// <summary>
        /// Calculate height and distance of each vertex
        /// </summary>
        /// <returns></returns>
        Vector3 CalculateArcPoint(float t, float maximumDistance)
        {
            var x = t * maximumDistance;
            var y = x * Mathf.Tan(radianAngle) - ((gravity * Mathf.Pow(x, 2)) / (2 * Mathf.Pow(velocity, 2) * Mathf.Pow(Mathf.Cos(radianAngle), 2)));
            var position = new Vector3(x, y) + transformLookingAt.position;
            curvePoints.Add(position);
            return position;
        }

        /// <summary>
        /// Draw Gizmo on each point created for the curve
        /// </summary>
        private void OnDrawGizmos()
        {
            for (int i = 0; i < curvePoints.Count; i++)
            {
                var gizmoTransform = curvePoints[i] + transformLookingAt.position;
                Gizmos.color = Color.yellow;
                Gizmos.DrawSphere(gizmoTransform, 1f);
            }
        }
    }
}